name: "Eldorian Word Generator"
description: "Generate a new word in the Eldorian language with detailed output guidance."
version: "1.0"
links:
  - name: "Initial User Inputs"
    type: "user_input"
    description: "Collect the initial English input and connotation."
    inputs:
      english_word:
        type: "string"
        description: "The English word to be translated into Eldorian. Example: 'woman'. Must be non-empty."
        required: true
      connotation:
        type: "string"
        description: "The connotation of the English word as provided. Example: 'of marriageable age'. Ensure clarity."
        required: true
    output_schema:
      properties:
        english_word:
          type: "string"
          description: "The English word as provided. Example: 'woman'."
        connotation:
          type: "string"
          description: "The connotation. Example: 'of marriageable age'. Do not leave blank."
        length:
          type: "integer"
          description: "The length of the English word. Example: 5."
        synonyms:
          type: "array"
          items:
            type: "string"
          description: "List synonyms that align with the connotation provided"
        part_of_speech:
          type: "string"
          description: "The part of speech. Example: 'noun'. Must be provided."
        declension:
          type: "string"
          description: "The declension, if applicable; otherwise, provide 'N/A'."
        base_form:
          type: "string"
          description: "The base form of the English word. Example: 'woman'. Must be provided."
      required:
        - english_word
        - connotation
        - base_form

  - name: "Clarify Instructions"
    type: "llm"
    template: 
      file: "conlang/1-Instructions for applying the EECH.txt"
      inputs:
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        connotation: "{{ Initial_User_Inputs.data.connotation }}"
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 200  # Increased from 50
    execution_method: "direct"

  - name: "Selecting an Origin Language"
    type: "llm"
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 200  # Increased from 50
    execution_method: "direct"
    template: 
      file: "conlang/2-Select the origin language.txt"
      inputs:
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        connotation: "{{ Initial_User_Inputs.data.connotation }}"
        part_of_speech: "{{ Initial_User_Inputs.data.part_of_speech }}"
    output_schema:
      required:
        - origin_language
      properties:
        origin_language:
          type: "string"
          enum: 
            - "Old Elven"
            - "Modern Elven"
            - "Old Dwarven"
            - "Sylvan"
            - "Celestial"
            - "Draconic"
          description: "The selected origin language. Example: 'Sylvan'. Choose one that fits the intended cultural context and meaning."

  - name: "Choose number of origin words"
    type: "llm"
    prompt: "Determine the number of imaginary origin words for '{{ Initial_User_Inputs.data.base_form }}' based on the word's length and complexity. For a simple, short word, return 1; for a longer, more complex word, return at least 3. Return valid JSON."
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 200
    output_schema:
      properties:
        number_of_origin_words:
          type: "integer"
          description: "The total number of origin words to be generated. Example: 3."
        justification:
          type: "string"
          description: "A brief explanation justifying the chosen number. Example: 'The word is long and requires multiple components.'"
      required:
        - number_of_origin_words
        
  - name: "Target number of syllables"
    type: "llm"
    temperature: 0.3
    token_limit: 50
    prompt: "Determine the target number of syllables for the Eldorian translation of '{{ Initial_User_Inputs.data.base_form }}' will have based on the commonness and concept complexity. (just output a number)"
    model: "gpt-4o"
    output_schema:
      properties:
        number_of_syllables:
          type: "integer"
          description: "The target number of syllables for the Eldorian translation."
      required:
        - number_of_syllables

  - name: "Generate the Origin Words"
    type: "llm"
    conversation: "none"
    temperature: 0.7
    token_limit: 2000
    template: 
      file: "conlang/3-Generate the origin words.txt"
      inputs:
        connotation: "{{ Initial_User_Inputs.data.connotation }}"
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        num_words: "{{ Choose_number_of_origin_words.data.number_of_origin_words }}"
        origin_language: "{{ Selecting_an_Origin_Language.data.origin_language }}"
    output_schema:
      properties:
        compound_origin_word:
          type: "string"
          description: "A thoughtful concatenation of the origin words into one long word."
        revised_connotation:
          type: "string"
          description: "An expanded description of the word's connotation given the selected origins. Retain the original central meaning ({{Initial_User_Inputs.data.base_form}})."
        origin_words:
          type: "array"
          items:
            type: "object"
            properties:
              word:
                type: "string"
                description: "The individual origin word. Example: 'foo'."
              english_word:
                type: "string"
                description: "The English meaning or translation of the origin word. Example: 'part of woman'."
              origin_language:
                type: "string"
                description: "The origin language of the origin word. Example: 'Sylvan'."
              meaning:
                type: "string"
                description: "A specific meaning assigned to the origin word. Do not leave blank."
              notes:
                type: "string"
                description: "Notes on why this meaning was selected. Example: 'Chosen for its acoustic quality.'"
              part_of_speech:
                type: "string"
                description: "The part of speech for the origin word. Example: 'noun'."
              connotation:
                type: "string"
                description: "The connotation of the origin word. Example: 'gentle, feminine'. Must be non-empty."
              usage_examples:
                type: "array"
                items:
                  type: "string"
                description: "One or more usage examples of the origin word. Example: ['used in greetings', 'common in poetry']."
          description: "An array containing objects for each generated origin word."
      required:
        - compound_origin_word
        - revised_connotation
        - origin_words

  - name: "Real language check"
    type: "llm"
    conversation: none
    description: "Check if the root words have been using real languages."
    prompt: "Is this word {{ Generate_the_Origin_Words.data.compound_origin_word }}' based on real world languages? Or is it an original word?"
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 200
    output_schema:
      properties:
        is_original:
          type: "boolean"
          description: "Indicates whether the word is original and not based on existing languages."
        explanation:
          type: "string"
          description: "Explanation of the decision."
      required:
        - is_original

  - name: "Originality review"
    type: "user_input"
    description: "Have the user select whether to abandon the word."
    condition: "{{ Real_language_check.data.is_original == false }}"
    inputs:
      continue:
        type: "select"
        description: "{{Generate_the_Origin_Words.data.compound_origin_word }}: is_original == {{Real_language_check.data.is_original }}. Please confirm if you would like to proceed with this word:"
        required: true
        options:
          - value: "Continue with {{Generate_the_Origin_Words.data.compound_origin_word }}"
            description: "The word is original and can be used."
          - value: "Abandon {{Generate_the_Origin_Words.data.compound_origin_word }}" 
            description: "The word is too similar to a real language word and should be abandoned."
    output_schema:
      properties:
        continue:
          type: "string" 
          description: "The user's decision on whether to continue with the word."
          enum: ["true", "false"]
      required:
        - continue
  - name: "Check and Terminate"
    type: "function"
    description: "Check if the word should be rejected and terminate if so"
    function:
      name: "terminate_process"
    inputs:
      condition: "{{ Originality_review.data.continue == false }}"
      message: "Word rejected"
    output_schema:
      properties:
        terminated:
          type: "boolean"
          description: "Whether the process was terminated"
        message:
          type: "string" 
          description: "Termination message or status"
      required:
        - terminated
        - message

  - name: "Number of linguistic events"
    type: "function"
    description: "Calculate a random number of linguistic events."
    function:
      name: "random_number"
    inputs:
      min_value:
        type: "integer"
        default: 1
      max_value:
        type: "integer"
        default: 3
    output_schema:
      properties:
        num_events:
          type: "integer"
          description: "The randomly generated number of linguistic events."
      required:
        - num_events

  - name: "Apply Morphology"
    type: "llm"
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 800
    execution_method: "direct"
    template:
      file: "conlang/4-Apply Morphology.txt"
      inputs:
        compound_word: "{{ Generate_the_Origin_Words.data.compound_origin_word }}"
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        connotation: "{{ Generate_the_Origin_Words.data.revised_connotation }}"
        part_of_speech: "{{ Initial_User_Inputs.data.part_of_speech }}"
        num_events: "{{ Number_of_linguistic_events.data.num_events }}"
        num_syllables: "{{ Target_number_of_syllables.data.number_of_syllables }}"
    output_schema:
      properties:
        morphology:
          type: "string"
          description: "A condensed summary of the morphological changes applied."
        updated_word:
          type: "string"
          description: "The final evolved word after applying morphology."
      required:
        - morphology
        - updated_word
        
  - name: "Apply Phonology"
    type: "llm"
    model: "gpt-4o"
    temperature: 0.5
    token_limit: 800
    execution_method: "direct"
    template:
      file: "conlang/5-Apply Phonology.txt"
      inputs:
        eldorian_word: "{{ Apply_Morphology.data.updated_word }}"
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        connotation: "{{ Generate_the_Origin_Words.data.revised_connotation }}"
        part_of_speech: "{{ Initial_User_Inputs.data.part_of_speech }}"
        num_syllables: "{{ Target_number_of_syllables.data.number_of_syllables }}"
    output_schema:
      properties:
        phonology: 
          type: "string"
          description: "A summary of the phonological adjustments made."
        updated_word:
          type: "string"
          description: "The final word after applying phonological adjustments."
      required:
        - updated_word

  - name: "Generate Derivatives"
    type: "llm"
    model: "gpt-4o"
    temperature: 0.7
    token_limit: 1500
    execution_method: "direct"
    template:
      file: "conlang/6-Derivatives.txt"
      inputs:
        eldorian_word: "{{ Apply_Phonology.data.updated_word }}"
        english_word: "{{ Initial_User_Inputs.data.base_form }}"
        connotation: "{{ Generate_the_Origin_Words.data.revised_connotation }}"
    output_schema:
      properties:
        base_word:
          type: "string"
          description: "The base word in Eldorian."
        english_word:
          type: "string"
          description: "The English translation of the base word."
        derivatives:
          type: "array"
          items:
            type: "object"
            properties:
              word:
                type: "string"
                description: "The derivative word in Eldorian."
              part_of_speech:
                type: "string"
                description: "The grammatical category of the derivative word (e.g., 'noun', 'verb', 'adjective', 'adverb')."
              meaning:
                type: "string"
                description: "The meaning or translation of the derivative word in English."
              notes:
                type: "string"
                description: "Any relevant notes or usage examples for the derivative word."
              morphological_changes:
                type: "string"
                description: "Description of any morphological changes applied to create the derivative."
              examples:
                type: "array"
                items:
                  type: "string"
                description: "Example sentences or phrases using the derivative word."
          description: "A list of derivatives generated from the base word."
      required:
        - base_word
        - english_word
        - derivatives

master_output_schema:
  type: "object"
  properties:
    Initial_User_Inputs:
      type: "object"
      properties:
        english_word:
          type: "string"
          description: "The original English word input by the user."
        connotation:
          type: "string"
          description: "The original provided connotation."
        length:
          type: "integer"
          description: "The calculated length of the input word."
        synonyms:
          type: "array"
          items:
            type: "string"
          description: "Any synonyms provided or computed."
        part_of_speech:
          type: "string"
          description: "The part of speech."
        declension:
          type: "string"
          description: "The declension, or 'N/A' if not applicable."
        base_form:
          type: "string"
          description: "The base form of the input word."
      required:
        - english_word
        - connotation
        - base_form
    Clarify_Instructions:
      type: "object"
      properties:
        raw_content:
          type: "string"
          description: "Output from the Clarify Instructions step."
      required:
        - raw_content
    Selecting_an_Origin_Language:
      type: "object"
      properties:
        origin_language:
          type: "string"
          description: "The language selected as the origin language. Example: 'Sylvan'."
      required:
        - origin_language
    Choose_number_of_origin_words:
      type: "object"
      properties:
        number_of_origin_words:
          type: "integer"
          description: "The determined number of origin words. Example: 3."
        justification:
          type: "string"
          description: "Explanation for the selected number."
      required:
        - number_of_origin_words
    Generate_the_Origin_Words:
      type: "object"
      properties:
        compound_origin_word:
          type: "string"
          description: "The concatenated generated origin words. Example: 'foobarbaz'."
        revised_connotation:
          type: "string"
          description: "The updated connotation after considering the origin words."
        origin_words:
          type: "array"
          items:
            type: "object"
            properties:
              word:
                type: "string"
                description: "The individual origin word."
              english_word:
                type: "string"
                description: "Its English counterpart."
              origin_language:
                type: "string"
                description: "The language of the origin word."
              meaning:
                type: "string"
                description: "The meaning assigned to this origin."
              notes:
                type: "string"
                description: "Notes from the selection process."
              part_of_speech:
                type: "string"
                description: "Part of speech."
              connotation:
                type: "string"
                description: "Connotation for the origin word."
              usage_examples:
                type: "array"
                items:
                  type: "string"
                description: "Usage examples for this origin."
          description: "Array of generated origin word objects."
      required:
        - compound_origin_word
        - revised_connotation
        - origin_words
    Apply_Morphology:
      type: "object"
      properties:
        morphology:
          type: "string"
          description: "Summary of morphological adjustments. Example: 'softened consonants, fronted vowels.'"
        updated_word:
          type: "string"
          description: "The final word after morphology. Must include all changes."
      required:
        - morphology
        - updated_word
    Generate_Derivatives:
      type: "object"
      properties:
        base_word:
          type: "string"
          description: "The base word in Eldorian."
        english_word:
          type: "string"
          description: "The English translation of the base word."
        derivatives:
          type: "array"
          items:
            type: "object"
            properties:
              word:
                type: "string"
                description: "The derivative word in Eldorian."
              part_of_speech:
                type: "string"
                description: "The grammatical category of the derivative word (e.g., 'noun', 'verb', 'adjective', 'adverb')."
              meaning:
                type: "string"
                description: "The meaning or translation of the derivative word in English."
              notes:
                type: "string"
                description: "Any relevant notes or usage examples for the derivative word."
              morphological_changes:
                type: "string"
                description: "Description of any morphological changes applied to create the derivative."
              examples:
                type: "array"
                items:
                  type: "string"
                description: "Example sentences or phrases using the derivative word."
          description: "A list of derivatives generated from the base word."
      required:
        - base_word
        - english_word
        - derivatives
  required:
    - Initial_User_Inputs
    - Clarify_Instructions
    - Selecting_an_Origin_Language
    - Choose_number_of_origin_words
    - Generate_the_Origin_Words
    - Apply_Morphology
    - Generate_Derivatives